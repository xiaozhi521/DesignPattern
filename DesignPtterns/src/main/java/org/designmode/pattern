创建型：工具类常用
    用来创建对象的模式，抽象了实例化的过程。
    创建对象时，不在直接实例化对象；而是根据特定场景，有程序来确定创建对象的方式，从而保证更高的性能、更好的架构优势。
    创建型模式主要有四种：
        工厂模式（简单工厂模式<Factory Pattern>、工厂方法、抽象工厂模式<Abstract Factory Pattern>）、
        单例模式<Singleton>（1.finish）、建造模式<Builder Pattern>（2.finish）、原型模式<Prototype Pattern>

结构型：组件内部常用
    关注类和对象的组合。继承的概念被用来组合和定义组合对象获得新功能的方式。
    用于帮助将多个对象组织成更大的结构。
    结构型模式主要有七种：
        适配器模式<Adapter Pattern>(9.finish)、桥接模式<Bridge Pattern>（3.finish）、组合器模式<Composite Pattern>、
        装饰器模式<Decorator Pattern>、门面模式<Facade Pattern>（4.finish）、享元模式<Flyweight Pattern>、代理模式<Proxy Pattern>（5.finish）

行为型：业务编码常用
    关注的是对象的行为，用来解决对象间的联系问题
    用于帮助系统间各对象的通信，以及如何控制复杂系统中的流程。
    行为模式主要有10种：
        命令模式<Command Pattern>（6.finish）、解释器模式<Interpreter Pattern>、迭代器模式<Iterator Pattern>（Iterator 就是最好的例子）、
        中介者模式<Mediator Pattern>、备忘录模式<Memento Pattern>、观察者模式<Observer Pattern>（7.finish）、状态模式<State Pattern>、
        策略模式<Strategy Pattern>（8.finish）、模板模式<Template Pattern>、访问者模式<Visitor Pattern>

设计原则：
    单一职责原则（Single Responsiblity Principle SRP）
        一个类只负责一个功能领域中的相应的职责。高内聚，低耦合。（封装）
    开闭原则（Open Closed Principle,OCP）
        对扩展开放，对修改关闭。不修改原有代码的情况下进行扩张。（封装，继承）
    里氏代换原则（Liskov Substitution Principle，LSP）
        所有引用基类（父类）的地方必须能透明的使用其子类对象。（多态，继承）
    依赖倒转原则（Dependency Inversion Principle，DIP）
        抽象不应该依赖细节，细节应该依赖于抽象。要针对接口编程，而不是针对实现编程（多态，继承）
    接口隔离原则（Interface Segregation Principle，ISP）
        接口拆分。当一个接口太大时，我们需要将它分割成一些更细小的接口。（多态，继承）
    迪米特法则（Principle of Least Knowledge，PLK）
        减少依赖。一个软件实体应当尽可能减少的与其他实体发生相互作用。（封装）


