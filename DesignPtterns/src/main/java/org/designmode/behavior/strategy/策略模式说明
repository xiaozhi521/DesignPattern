定义：
    策略模式属于对象行为型设计模式。主要定义一系列算法，把这些的算法一个个分装成拥有共同接口的
    单独的类，并且他们之间可以相互转换。策略模式使这些算法在客户端调用他们的时候能够互不影响的变化，
    这里的算法不要狭义的理解为数据结构中算法，可以理解为不同业务处理方法。

策略模式的好处：
    将算法的使用和算法本身分离，即将变化的具体算法封装了起来，降低了代码的耦合度，系统业务策略的
    变更仅需少量修改。
策略模式原则：
    接口隔离原则 单一职责原则，开闭原则
结构：
    由三个角色组成：
        1.算法使用环境(Context)角色：算法被引用到这里和一些其他的与环境有关的操作一起来完成任务。
        2.抽象策略(Strategy)角色，规定了所有具体策略角色所需的接口。在java它通常由接口或者抽象类来实现
        3.具体策略(Concrete Strategy)角色，实现了抽象角色定义的接口

举例：
    DiscountStrategy 接口 ---> 抽象策略角色
    OldDiscount 实现类，VIPDiscount 实现类 ---> 具体策略角色
    DiscountContext 算法使用环境 ---> 算法使用环境角色

使用建议：
    1)、系统需要能够在集中算法中快速切换
    2)、系统中有一些类他们仅行为不同时，可以考虑采用策略模式来进行重构
    3)、系统中存在多重选择条件语句时，可以考虑采用策略模式来重构。
    但是要注意一点，策略模式中不可以同时使用多于一个的算法。