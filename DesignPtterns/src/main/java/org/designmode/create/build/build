定义：
    讲一个复杂对象构建与他的表示分离，使得同样的构建过程可以创建不同的表示。
    将构造复杂对象的过程和组成对象的部件解耦。
结构：
    1) 抽象建造者角色：这个角色用来规范产品对象的各个组成成分的建造。一般而言，此角色独立于应用程序的业务逻辑
    2) 具体建造者角色：担任这个角色的是于应用程序紧密相关的类，他们在指导者的调用下创建产品实例。
        这个角色在实现抽象抽象建造者角色提供的方法的前提下，达到完成产品组装，提供成品的功能。
    3) 指导者角色：调用具体建造者角色以创建产品对象。
        指导者并没有产品类的具体知识，真正又有产品类的具体知识的是具体建造者对象
    4) 产品角色：建造中的复杂对象。
        他要包含哪些定义组件的类，包括将这些组件装配成产品的接口。

优点：


扩展
    建造模式中很可能要用到组成成品的各种组件类，对于这些类的创建可以考虑使用工厂
    方法或者原型模式来实现，在必要的时候也可以加上单例模式来控制类实例的产生。但是要
    坚持一个大前提就是要使引入的模式给你的系统带来好处，而不是臃肿的结构。

    建造模式在得到复杂产品的时候可能要引用多个不同的组件，在这一点上来看，建造模
    式和抽象工厂模式是相似的。可以从以下两点来区分两者：创建模式着重于逐步将组件装配
    成一个成品并向外提供成品，而抽象工厂模式着重于得到产品族中相关的多个产品对象；抽
    象工厂模式的应用是受限于产品族的（具体参见《深入浅出工厂模式》），建造模式则不会。
    由于建造模式和抽象工厂模式在实现功能上相似，所以两者使用的环境都比较复杂并且
    需要更多的灵活性。
    组合模式中的树枝构件角色（Composite）往往是由多个树叶构件角色（Leaf）组成，
    因此树枝构件角色的产生可以由建造模式来担当。