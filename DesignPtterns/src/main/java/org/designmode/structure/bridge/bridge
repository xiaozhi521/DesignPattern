定义
    将抽象部分与它的实现部分分离，使他们都可以独立变化
    主要应对的是：由于实际的需要，某个类具有两个或两个以上的维度变化，如果只是使用继承将无法
    实现这种需要，或者使得设计变得相当臃肿。
结构
    有四种角色组成
    1)、抽象(Abstraction) 角色：它定义了抽象的接口而且维护着一个指向实现 (Implementor) 角色的引用。
    2)、精确抽象 (RefinedAbstraction) 角色：实现并扩充由抽象角色定义的接口
    3)、实现 (Implementor) 角色：给出了实现类的接口，这里的接口与抽象角色中的接口可以不一致
    4)、具体实现 (ConcreteImplementor) 角色:给出了实现角色定义接口的具体实现

实例


使用环境
    1)、当你的系统中有多个地方要使用到类似的行为，或者是多个类似行为的组合时，可以考
       虑使用桥梁模式来提高重用，并减少因为行为的差异而产生的子类。
    2)、系统中某个类的行为可能会有几种不同的变化趋势，为了有效的将变化封装，可以考虑
       将类的行为抽取出来。
    3)、当然上面的情况也可以是这样，行为可能要被不同相似类使用，也可以考虑使用桥梁模
       式来实现。

优势
    1)、将可能变化的部分单独封装起来，使得变化产生的影响最小，不用编译不必要的代码。
    2)、抽象部分和实现部分可以单独的变动，并且每一部分的扩充都不会破坏桥梁模式搭起来
       架子。
    3)、对于客户程序来说，你的实现细节是透明的。


扩展